import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from web3 import Web3

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# Replace 'TOKEN' with your Bot's API token
TOKEN = 'TOKEN'
updater = Updater(token=TOKEN, use_context=True)

# replace it with your ERC20 address
payment_address = 'ERC20_ADDRESS'

menu_items = {
    "item1": 10,  # 10$
    "item2": 20,  # 20$
    "item3": 30,  # 30$
}


def start(update: Update, context: CallbackContext):
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi! Welcome to our online shop. Type /menu to view the menu.')


def menu(update: Update, context: CallbackContext):
    """Show the menu when the command /menu is issued"""
    keyboard = [[InlineKeyboardButton(i, callback_data=i)] for i in menu_items.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text('Here is our menu:', reply_markup=reply_markup)


def button(update: Update, context: CallbackContext):
    """Handle button press"""
    query = update.callback_query
    query.answer()

    item = query.data
    item_price = menu_items[item]
    
    # Here you should specify your logic for order processing and quantity selection

    context.user_data['order'] = {
        'item': item,
        'price': item_price,
    }

    query.edit_message_text(text=f"Selected item: {item} with price {item_price}\nPlease send the payment to this address: {payment_address}")


def verify_payment(update: Update, context: CallbackContext):
    """Verify payment with txid"""
    txid = update.message.text

    # Here you should connect to Ethereum network and verify the transaction
    # Be careful, this is a sensitive process, real money is involved
    # For the purpose of this example, let's just pretend we've checked it and it's okay

    update.message.reply_text(f"Payment of {context.user_data['order']['price']} for {context.user_data['order']['item']} has been verified. Your order number is 12345. We will process your order soon.")


def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    """Start the bot."""
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu))

    dp.add_handler(CallbackQueryHandler(button))

    dp.add_handler(CommandHandler("verify_payment", verify_payment))

    dp.add_error_handler(error)

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
